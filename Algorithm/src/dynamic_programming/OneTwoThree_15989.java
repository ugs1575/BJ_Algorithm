/*
* Q9095 1,2,3더하기
*
* 정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.
*
* 이 문제와 비슷한 문제이다.
*
* 이 문제를 풀었던 방식은
* 어떤걸 더하고 더하고 더해서 끝에 1이 오는 경우, 2가 오는 경우, 3이 오는 경우
* 이렇게 나눠서 생각해줬다.
*
* d[0] = 1; //아무것도 더하지 않았을때 0이 되는 경우 1개
* d[1] = 1;
* d[2] = 2;
* for(int x=3; x<11; x++){
*     d[x] = d[x-3]+d[x-2]+d[x-1];
* }
*
*
* 비슷한 문제이지만 다른 점은
* 합을 이루고 있는 수의 순서만 다른 것은 같은 것으로 친다는 점이다.
*
* 중복을 제거 하기 위해서는 대표를 정해주면 된다.
* 예를 들어 1,2,3으로 대표를 정해준다면
*
* 1로 만들수 있는 조합을 만들고, 끝, 더이상 1은 사용하지 않는다
* 2로 만들수 있는 조합을 만드고, 끝
* 3으로 만들 수 있는 조합을 만든다. 끝
*
*
* 63번째 줄과 64번째 줄을 바꾸면 중복가능(1,1,2와 1,2,1를 다른것으로 치는) 경우 개수가 나온다.
*
* 1,2,3 더하기 에서는
* i번 수를 만들기위해 끝이 j번인경우, 그다음 j번인경우를 모두 더해주는 식이라면*
* 1,2,3 더하기 4에서는
* j번 수를 이용해서 1~n까지 수를 만들고
* 또 그다음 j번수를 이용해서 1~n까지 만드는 식이다
*
*
*
* 중복이 가능한 경우의 점화식이
* d[n] = d[n-1] + d[n-2] + d[n-3]
* 에서 d[n-1]과 d[n-2], d[n-3]를 먼저 구한다음 d[n]을 구하지말고
* 1만 써서 표현할 수 있는 개수, 2만 써서 표현할 수 있는 개수, 3만 써서 표현할 수 있는 개수를
* d[n]에 각각 더해주면서 구하면 중복이 없는 경우만 뽑아 넣을 수 있게 된다.
*
* */


package dynamicProgramming;

import java.util.Scanner;

public class OneTwoThree_15989 {
    static final int limit = 10000;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = 3;
        int[] nums = {1, 2, 3};
        int[] d = new int[limit+1];

        d[0] = 1;
        for(int j=0; j<m; j++){
            for(int i=1; i<=limit; i++){
                if(i-nums[j] >= 0){
                    d[i] += d[i-nums[j]];
                }
            }
        }


        int t = sc.nextInt();
        while (t-- > 0){
            int n = sc.nextInt();
            System.out.println(d[n]);
        }
    }
}
