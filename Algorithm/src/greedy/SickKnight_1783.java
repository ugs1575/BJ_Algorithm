/*
* 이동할 수 있는 방법
* 1번 - 2칸 위로, 1칸 오른쪽
* 2번 - 1칸 위로, 2칸 오른쪽
* 3번 - 1칸 아래로, 2칸 오른쪽
* 4번 - 2칸 아래로, 1칸 오른쪽
* 이동횟수가 4번보다 적지 않다면, 이동방법을 적어도.. 모두 한번씩 사용해야한다.
* 이동횟수가 4번보다 적은 경우에는 이동방법에 대한 제약이 없다.
*
*
* 나눠서 생각 해보자
* 1) 높이가 1일때
* 어떠한 방법도 사용할 수 없으니 정답은 1
*
* 2) 높이가 2일때
* 높이가 2이기 때문에 2번 3번 사용가능
* 2번과 3번을 반복해서 사용하면 최대 4까지 사용할 수 있다
* 왜냐하면 이동횟수가 4번이상일 때는 위 4가지 방법을 모두 한번씩 사용해야하는데 그러면 이동할수 있는 방법이 더이상 없기 때문이다
* 2개씩 짝지어서 생각해보면 (m-1)/2 +1 -> (w+1)/2
* 정답은 min(4, (w+1)/2)
*
* 3) 높이가 3 이상일때
* 4가지 방법을 모두 사용할 수 있다
* 4가지 방법을 모두 사용하려면 가로가 최소 7이 되어야한다
*   너비가 7이상일 때, 4번 모두 사용해보고 그 다음 어떤 방법이 가장 많은 칸을 방문할 수 있을 까?
*   1. 1번,4번 반복 (오른쪽 1칸씩이동)
*   2. 2번,3번 반복 (오른쪽 2칸씩이동)
*   1번이 더 많은 칸은 방문할수 있다.
* 모두 한번씩 사용했을 때 2번, 3번 때문에 세로 2줄을 띄어 넘었으므로 정답은 m-2
*
*   너비가 7미만일 때, 4가지 방법을 모두 사용할 수 없으니 1번,4번 반복한다
* 정답은 min(4, m)
*
*
* */


package greedy;

import java.util.Scanner;

public class SickKnight_1783 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        int max = 0;
        if(n == 1){
            max = 1;
        }else if(n == 2){
            max = Math.min(4, (m+1)/2);
        }else{
            if(m < 7){
                max = Math.min(4, m);
            }else{
                max = m-2;
            }
        }

        System.out.println(max);
    }
}
